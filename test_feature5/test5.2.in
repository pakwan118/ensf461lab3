var = echo -n hello
var = echo -n world
echo -n "myfile.txt" > myfile.txt
var2 = cat "myfile.txt"
echo $var
cat $var2
echo " "
echo done
rm myfile.txt

            execute_command_with_redirection(sub_cmd, params[i + 1]);
            continue;

            void execute_command_with_redirection(char *command, char *filename) {
                pid_t pid = fork(); // Create a child process
                if (pid == 0) { // Child process
                    // Open the file for writing
                    int file = open(filename, O_WRONLY | O_CREAT | O_TRUNC, 0644);
                    if (file < 0) {
                        perror("open");
                        exit(EXIT_FAILURE);
                    }

                    // Redirect stdout to the file
                    if (dup2(file, STDOUT_FILENO) < 0) {
                        perror("dup2");
                        exit(EXIT_FAILURE);
                    }

                    close(file); // Close the file descriptor, no longer needed

                    // Split the command into program and arguments
                    char *args[1024];
                    char *token = strtok(command, " ");
                    int i = 0;
                    while (token != NULL) {
                        args[i++] = token;  // Collect command arguments
                        token = strtok(NULL, " ");
                    }
                    args[i] = NULL;  // Null-terminate the arguments list

                    // Execute the command
                    execvp(args[0], args);  // Replace this process with the command
                    perror("execvp");       // If execvp fails, print an error
                    exit(EXIT_FAILURE);     // Exit with failure if execvp fails
                } else {
                    // Parent process: wait for the child process to finish
                    wait(NULL);
                }
            }